name: homebridge
version: "0"
version-script: jq -r --arg x version '.[$x]' prime/lib/node_modules/homebridge/package.json
summary: Homebridge
description: |
   Homebridge is a lightweight NodeJS server you can run on your home network that emulates the iOS HomeKit API. It supports Plugins, which are community-contributed modules that provide a basic bridge from HomeKit to various 3rd-party APIs provided by manufacturers of "smart home" devices.

confinement: strict
grade: stable

# give  hook network access so it can update npm packages if needed
hooks:
    post-refresh:
        plugs:
            - network

environment:
    npm_config_prefix:           "$SNAP_COMMON"
    npm_config_unsafe_perm:      "true"
    npm_config_global:           "true"
    npm_config_globalignorefile: "$SNAP_COMMON/npmignore"
    npm_config_globalconfig:     "$SNAP_COMMON/npmrc"
    npm_config_init_module:      "$SNAP_COMMON/.npm-init.js"
    npm_config_userconfig:       "$SNAP_COMMON/unpmrc"
    npm_config_cache:            "$SNAP_COMMON/.npm"
    PYTHON:                      "$SNAP/usr/bin/python2.7"
    HOME:                        "$SNAP_COMMON"
    PATH:                        "$SNAP_COMMON/bin:$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH:$SNAP/usr/lib/git-core"
    LDFLAGS:                     "--verbose -L${SNAP}/usr/ -L${SNAP}/usr/lib -L${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/"
    CFLAGS:                      "-I${SNAP}/usr/include/${SNAPCRAFT_ARCH_TRIPLET} -I${SNAP}/usr/include"
    CPPFLAGS:                    "-I${SNAP}/usr/include/${SNAPCRAFT_ARCH_TRIPLET} -I${SNAP}/usr/include"
    LD_LIBRARY_PATH:             "$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/${SNAPCRAFT_ARCH_TRIPLET}:$SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}"

apps:
    homebridge:
        # -U < path where config is store> 
        command: bin/homebridge-wrapper -U $SNAP_COMMON
        adapter: none
        daemon: simple
        plugs:
          - network-bind
          - avahi-control
          - ppp
          - log-observe

    manual:
        command: bin/homebridge-wrapper -U $SNAP_COMMON
        adapter: none
        plugs:
          - network-bind
          - avahi-control
          - ppp
          - log-observe

    show-qr-code:
        command: bin/show-qr-code
        adapter: none

    npm:
        command: bin/npm-wrapper
        adapter: none
        plugs:
          - network

    npm-install:
        command: bin/npm-wrapper install
        adapter: none
        plugs:
          - network

    list-installed-packages:
        command: bin/npm-wrapper ls --depth 0
        adapter: none
        plugs:
          - network

    list-outdated-packages:
        command: bin/npm-wrapper outdated --depth 0
        adapter: none
        plugs:
          - network

    update-all-packages:
        command: bin/npm-update-all
        adapter: none
        plugs:
          - network

    help:
        command: bin/homebridge-help
        adapter: none

parts:
    homebridge:
        source: .
        plugin: nodejs
        after:
          - node
        node-engine: 8.11.3
        node-packages:
            - homebridge
            - homebridge-info
            - homebridge-server
            - node-gyp
        npm-flags:
            - --unsafe-perm
        build-packages:
            - python
            - libavahi-compat-libdnssd-dev
            - jq
        stage-packages:
            - libavahi-compat-libdnssd-dev
            - python2.7
            - rsync
        override-pull: |
            # workaround to make sure we don't use node from stage
            mv ${SNAPCRAFT_STAGE}/bin/node ${SNAPCRAFT_STAGE}/bin/node.snap
            snapcraftctl pull
        override-build: |
            snapcraftctl build
            npm install -g --unsafe-perm npm@latest
            # undo workaround to make sure we don't use node from stage
            mv ${SNAPCRAFT_STAGE}/bin/node.snap ${SNAPCRAFT_STAGE}/bin/node
        stage:
            - -bin/node

    glue:
        plugin: dump
        source: glue
        prime:
            - -.quiltrc
            - -node-*.patch

    glibc:
        plugin: nil
        source: https://git.launchpad.net/ubuntu/+source/glibc
        source-tag: ubuntu/xenial-updates
        source-type: git
        after:
          - homebridge
        stage-packages:
            - make
            - gcc
            - g++
            - g++-5
            - cpp-5
            - build-essential
            - libstdc++-5-dev
            - git
            - gettext-base
            - coreutils
        build-packages:
            - rdfind
            - symlinks
            - systemtap-sdt-dev
            - libaudit-dev
            - g++-5
            - wget
            - quilt
            - gawk
        override-pull: |
            snapcraftctl pull
            rm -rf manual
            quilt push -afq --leave-rejects --quiltrc=${SNAPCRAFT_STAGE}/quiltrc
            sed -i 's|curpass =.*|curpass = "libc"|g' debian/rules
            sed -i 's|prefix=/usr|prefix=/snap/'"${SNAPCRAFT_PROJECT_NAME}"'/current/usr|g' debian/rules
            sed -i 's|dir=/|dir=/snap/'"${SNAPCRAFT_PROJECT_NAME}"'/current/|g' debian/rules
            sed -i 's|build-arch: $(stamp)build_C.UTF-8 |# build-arch: $(stamp)build_C.UTF-8|g' debian/rules
            sed -i 's|$(stamp)build_locales-all|# $(stamp)build_locales-all|g' debian/rules
            sed -i 's|--prefix=/usr|--prefix=/snap/'"${SNAPCRAFT_PROJECT_NAME}"'/current/usr|g' debian/rules.d/build.mk
        override-build: |
            sed -i 's|$(CURDIR)/debian/tmp-$(curpass)|'"${PWD}"'|g' debian/rules.d/build.mk
            mkdir -p snap/homebridge/current/etc
            cp debian/local/etc/ld.so.conf snap/homebridge/current/etc/
            unset LD_LIBRARY_PATH
            DEB_BUILD_PROFILES='stage0' DEB_BUILD_OPTIONS='nocheck parallel=$(nproc)' debian/rules build-arch
            cd build-tree/*-libc
            make install -j$(nproc)
            cd ../../
            cp -rf snap/${SNAPCRAFT_PROJECT_NAME}/current/lib ${SNAPCRAFT_PART_INSTALL}
            cp -rf snap/${SNAPCRAFT_PROJECT_NAME}/current/sbin ${SNAPCRAFT_PART_INSTALL}
            cp -rf snap/${SNAPCRAFT_PROJECT_NAME}/current/usr ${SNAPCRAFT_PART_INSTALL}
            ln -sf gcc ${SNAPCRAFT_PART_INSTALL}/usr/bin/cc
    node:
        source: https://github.com/nodejs/node.git
        plugin: nil
        after:
            - glue
        override-pull: |
            snapcraftctl pull
            node_version=$(grep -m 1 "node-engine:" ../../../snap/snapcraft.yaml | awk '{print $2}')
            git checkout v${node_version}
            git apply ${SNAPCRAFT_STAGE}/node-$(echo ${node_version} | awk -F "." '{print $1}').x-snap.patch
        override-build: |
            ./configure
            make -j$(nproc)
            mkdir -p ${SNAPCRAFT_PART_INSTALL}/bin
            cp out/Release/node ${SNAPCRAFT_PART_INSTALL}/bin

